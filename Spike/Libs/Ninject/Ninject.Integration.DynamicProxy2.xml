<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ninject.Integration.DynamicProxy2</name>
    </assembly>
    <members>
        <member name="T:Ninject.Integration.DynamicProxy2.Infrastructure.DynamicProxy2ProxyFactory">
            <summary>
            An implementation of a proxy factory that uses a Castle DynamicProxy2 <see cref="T:Castle.DynamicProxy.ProxyGenerator"/>
            and <see cref="T:Ninject.Integration.DynamicProxy2.Infrastructure.DynamicProxy2Wrapper"/>s to create wrapped instances.
            </summary>
        </member>
        <member name="M:Ninject.Integration.DynamicProxy2.Infrastructure.DynamicProxy2ProxyFactory.Dispose(System.Boolean)">
            <summary>
            Releases all resources held by the object.
            </summary>
            <param name="disposing"><see langword="True"/> if managed objects should be disposed, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:Ninject.Integration.DynamicProxy2.Infrastructure.DynamicProxy2ProxyFactory.Wrap(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Wraps the specified instance in a proxy.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance to wrap.</param>
            <returns>A proxy that wraps the instance.</returns>
        </member>
        <member name="M:Ninject.Integration.DynamicProxy2.Infrastructure.DynamicProxy2ProxyFactory.Unwrap(Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Unwraps the specified proxied instance.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="proxy">The proxied instance to unwrap.</param>
            <returns>The unwrapped instance.</returns>
        </member>
        <member name="T:Ninject.Integration.DynamicProxy2.Infrastructure.DynamicProxy2Wrapper">
            <summary>
            Defines an interception wrapper that can convert a Castle DynamicProxy2 <see cref="T:Castle.Core.Interceptor.IInvocation"/>
            into a Ninject <see cref="T:Ninject.Core.Interception.IRequest"/> for interception.
            </summary>
        </member>
        <member name="M:Ninject.Integration.DynamicProxy2.Infrastructure.DynamicProxy2Wrapper.#ctor(Ninject.Core.IKernel,Ninject.Core.Activation.IContext,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Integration.DynamicProxy2.Infrastructure.DynamicProxy2Wrapper"/> class.
            </summary>
            <param name="kernel">The kernel associated with the wrapper.</param>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The wrapped instance.</param>
        </member>
        <member name="M:Ninject.Integration.DynamicProxy2.Infrastructure.DynamicProxy2Wrapper.Intercept(Castle.Core.Interceptor.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="castleInvocation">The invocation.</param>
            <returns>The return value of the invocation, once it is completed.</returns>
        </member>
        <member name="T:Ninject.Integration.DynamicProxy2.DynamicProxy2Module">
            <summary>
            Extends the functionality of the kernel, providing a proxy factory that uses LinFu
            to generate dynamic proxies.
            </summary>
        </member>
        <member name="M:Ninject.Integration.DynamicProxy2.DynamicProxy2Module.BeforeLoad">
            <summary>
            Prepares the module for being loaded. Can be used to connect component dependencies.
            </summary>
        </member>
        <member name="M:Ninject.Integration.DynamicProxy2.DynamicProxy2Module.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
    </members>
</doc>
