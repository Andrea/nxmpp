<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Nito.Async</name>
  </assembly>
  <members>
    <member name="T:Nito.Async.AsyncResultEventArgs`1">
      <summary>
            Provides data for the asynchronous event handlers that have one result.
            </summary>
      <typeparam name="T">The type of the result of the asynchronous operation.</typeparam>
    </member>
    <member name="M:Nito.Async.AsyncResultEventArgs`1.#ctor(System.Exception)">
      <summary>
            Creates an arguments object indicating an unsuccessful operation.
            </summary>
      <param name="error">The error that occurred.</param>
    </member>
    <member name="M:Nito.Async.AsyncResultEventArgs`1.#ctor(`0)">
      <summary>
            Creates an arguments object indicating a successful completion.
            </summary>
      <param name="result">The result of the asynchronous operation.</param>
    </member>
    <member name="M:Nito.Async.AsyncResultEventArgs`1.#ctor(`0,System.Exception,System.Boolean,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.AsyncResultEventArgs`1" /> class.
            </summary>
      <param name="result">The result of the asynchronous operation.</param>
      <param name="error">Any error that occurred. Null if no error.</param>
      <param name="cancelled">Whether the operation was cancelled.</param>
      <param name="userState">The optional user-defined state object.</param>
    </member>
    <member name="P:Nito.Async.AsyncResultEventArgs`1.Result">
      <summary>
            The result of the asynchronous operation. This property may only be read if <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> is null.
            </summary>
    </member>
    <member name="T:Nito.Async.AsyncTimeoutTimer">
      <summary>
            Provides asynchronous timeout notifications.
            </summary>
    </member>
    <member name="M:Nito.Async.AsyncTimeoutTimer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.AsyncTimeoutTimer" /> class.
            </summary>
    </member>
    <member name="M:Nito.Async.AsyncTimeoutTimer.Cancel">
      <summary>
            Cancels a timeout.
            </summary>
    </member>
    <member name="M:Nito.Async.AsyncTimeoutTimer.Dispose">
      <summary>
            Frees all system resources for the timer. This method will <see cref="M:Nito.Async.AsyncTimeoutTimer.Cancel" /> the timer if it is active.
            </summary>
    </member>
    <member name="M:Nito.Async.AsyncTimeoutTimer.Reset">
      <summary>
            Re-starts the current timeout. See <see cref="M:Nito.Async.AsyncTimeoutTimer.Set(System.TimeSpan)" />.
            </summary>
    </member>
    <member name="M:Nito.Async.AsyncTimeoutTimer.Set(System.TimeSpan)">
      <summary>
            Starts a timeout.
            </summary>
      <param name="when">The timeout value.</param>
    </member>
    <member name="E:Nito.Async.AsyncTimeoutTimer.Timeout">
      <summary>
            Notifies that a timeout has occurred.
            </summary>
    </member>
    <member name="T:Nito.Async.GenericSynchronizingObject">
      <summary>
            Allows objects that use <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> (usually using a property named SynchronizingObject) to synchronize to a
            generic <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
    </member>
    <member name="M:Nito.Async.GenericSynchronizingObject.#ctor">
      <summary>
            Creates a new synchronizing object, binding to <see cref="P:System.Threading.SynchronizationContext.Current">SynchronizationContext.Current</see>.
            </summary>
    </member>
    <member name="M:Nito.Async.GenericSynchronizingObject.BeginInvoke(System.Delegate,System.Object[])">
      <summary>
            Starts the invocation of a delegate on the thread that created this <see cref="T:Nito.Async.GenericSynchronizingObject" />.
            A corresponding call to <see cref="M:Nito.Async.GenericSynchronizingObject.EndInvoke(System.IAsyncResult)" /> is not required.
            </summary>
      <param name="method">The delegate to run.</param>
      <param name="args">The arguments to pass to <paramref name="method" />.</param>
      <returns>An <see cref="T:System.IAsyncResult" /> that can be used to detect completion of the delegate.</returns>
    </member>
    <member name="M:Nito.Async.GenericSynchronizingObject.EndInvoke(System.IAsyncResult)">
      <summary>
            Waits for the invocation of a delegate to complete, and returns the result of the delegate.
            This may only be called once for a given <see cref="T:System.IAsyncResult" /> object, from one thread.
            </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:Nito.Async.GenericSynchronizingObject.BeginInvoke(System.Delegate,System.Object[])" />.</param>
      <returns>The result of the delegate.</returns>
    </member>
    <member name="M:Nito.Async.GenericSynchronizingObject.Invoke(System.Delegate,System.Object[])">
      <summary>
            Invokes a delegate on the thread that created this <see cref="T:Nito.Async.GenericSynchronizingObject" />.
            </summary>
      <param name="method">The delegate to invoke.</param>
      <param name="args">The parameters for <paramref name="method" />.</param>
      <returns>The result of the delegate.</returns>
    </member>
    <member name="P:Nito.Async.GenericSynchronizingObject.InvokeRequired">
      <summary>
            Whether the current thread must invoke a delegate.
            </summary>
    </member>
    <member name="T:Nito.Async.Sync">
      <summary>
            Provides utility methods for implementing asynchronous operations.
            </summary>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeAction(System.Action)">
      <summary>
            Returns an <see cref="T:System.Action" /> that executes in the context of the thread that called this method (if that thread
            exposes <see cref="T:System.Threading.SynchronizationContext" />).
            </summary>
      <param name="callback">The callback to wrap.</param>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeAction``1(System.Action{``0})">
      <summary>
            Returns an <see cref="T:System.Action`1" /> that executes in the context of the thread that called this method (if that thread
            exposes <see cref="T:System.Threading.SynchronizationContext" />).
            </summary>
      <param name="callback">The callback to wrap.</param>
      <typeparam name="T">The type of the parameter to the callback.</typeparam>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeAction``2(System.Action{``0,``1})">
      <summary>
            Returns an <see cref="T:System.Action`2" /> that executes in the context of the thread that called this method (if that thread
            exposes <see cref="T:System.Threading.SynchronizationContext" />).
            </summary>
      <param name="callback">The callback to wrap.</param>
      <typeparam name="T1">The type of the first parameter to the callback.</typeparam>
      <typeparam name="T2">The type of the second parameter to the callback.</typeparam>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeAction``3(System.Action{``0,``1,``2})">
      <summary>
            Returns an <see cref="T:System.Action`3" /> that executes in the context of the thread that called this method (if that thread
            exposes <see cref="T:System.Threading.SynchronizationContext" />).
            </summary>
      <param name="callback">The callback to wrap.</param>
      <typeparam name="T1">The type of the first parameter to the callback.</typeparam>
      <typeparam name="T2">The type of the second parameter to the callback.</typeparam>
      <typeparam name="T3">The type of the third parameter to the callback.</typeparam>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeAction``4(System.Action{``0,``1,``2,``3})">
      <summary>
            Returns an <see cref="T:System.Action`4" /> that executes in the context of the thread that called this method (if that thread
            exposes <see cref="T:System.Threading.SynchronizationContext" />).
            </summary>
      <param name="callback">The callback to wrap.</param>
      <typeparam name="T1">The type of the first parameter to the callback.</typeparam>
      <typeparam name="T2">The type of the second parameter to the callback.</typeparam>
      <typeparam name="T3">The type of the third parameter to the callback.</typeparam>
      <typeparam name="T4">The type of the third parameter to the callback.</typeparam>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeAsyncCallback(System.AsyncCallback)">
      <summary>
            Returns an <see cref="T:System.AsyncCallback" /> that executes in the context of the thread that called this method (if that thread
            exposes <see cref="T:System.Threading.SynchronizationContext" />).
            </summary>
      <param name="callback">The callback to wrap.</param>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeTimerCallback(System.Threading.TimerCallback)">
      <summary>
            Returns a <see cref="T:System.Threading.TimerCallback" /> that executes in the context of the thread that called this method (if that
            thread exposes <see cref="T:System.Threading.SynchronizationContext" />).
            </summary>
      <param name="callback">The callback to wrap.</param>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeWaitCallback(System.Threading.WaitCallback)">
      <summary>
            Returns a <see cref="T:System.Threading.WaitCallback" /> that executes in the context of the thread that called this method (if that thread
            exposes <see cref="T:System.Threading.SynchronizationContext" />).
            </summary>
      <param name="callback">The callback to wrap.</param>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="M:Nito.Async.Sync.SynchronizeWaitOrTimerCallback(System.Threading.WaitOrTimerCallback)">
      <summary>
            Returns a <see cref="T:System.Threading.WaitOrTimerCallback" /> that executes in the context of the thread that called this method (if that thread
            exposes <see cref="T:System.Threading.SynchronizationContext" />).
            </summary>
      <param name="callback">The callback to wrap.</param>
      <returns>A synchronized callback.</returns>
    </member>
    <member name="T:Nito.Async.ActionDispatcher">
      <summary>
            A thread-safe queue of actions.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionDispatcher.#ctor">
      <summary>
            Initializes a new, empty action queue.
            </summary>
    </member>
    <member name="P:Nito.Async.ActionDispatcher.Current">
      <summary>
            Returns the currently active action queue. For executing actions, this is their own action queue; for other threads, this is null.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionDispatcher.Dispose">
      <summary>
            Releases all resources.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionDispatcher.QueueAction(System.Action)">
      <summary>
            Queues an action to an action dispatcher.
            </summary>
      <param name="action">The action to execute.</param>
    </member>
    <member name="M:Nito.Async.ActionDispatcher.QueueExit">
      <summary>
            Queues an exit action, causing <see cref="M:Nito.Async.ActionDispatcher.Run" /> to return.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionDispatcher.Run">
      <summary>
            Executes the action queue.
            </summary>
    </member>
    <member name="T:Nito.Async.ActionDispatcherSynchronizationContext">
      <summary>
            Provides a synchronization context for a thread running an <see cref="T:Nito.Async.ActionDispatcher" />.
            </summary>
    </member>
    <member name="M:Nito.Async.ActionDispatcherSynchronizationContext.#ctor(Nito.Async.ActionDispatcher)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Async.ActionDispatcherSynchronizationContext" /> class by using the specified <see cref="T:Nito.Async.ActionDispatcher" />.
            </summary>
      <param name="actionDispatcher">The action queue to associate with this <see cref="T:Nito.Async.ActionDispatcherSynchronizationContext" />.</param>
    </member>
    <member name="M:Nito.Async.ActionDispatcherSynchronizationContext.CreateCopy">
      <summary>
            Creates a copy of this <see cref="T:Nito.Async.ActionDispatcherSynchronizationContext" />.
            </summary>
      <returns>The copy of this synchronization context.</returns>
    </member>
    <member name="M:Nito.Async.ActionDispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Invokes the callback in the synchronization context asynchronously. The callback is placed in the action queue.
            </summary>
      <param name="d">The delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:Nito.Async.ActionDispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Invokes the callback in the synchronization context synchronously. The callback is placed in the action queue.
            </summary>
      <param name="d">The delegate to call.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:Nito.Async.Sync.InvokeAndCallback(System.Action,System.Action{System.ComponentModel.AsyncCompletedEventArgs},System.Object)">
      <summary>
            Runs <paramref name="action" /> followed by <paramref name="callback" /> with arguments indicating success. If <paramref name="action" />
            raises an exception, <paramref name="callback" /> is invoked with arguments indicating the error.
            </summary>
      <param name="action">The action to perform.</param>
      <param name="callback">The callback to indicate success or error.</param>
      <param name="state">The user state to include in the arguments to the callback. May be null.</param>
    </member>
    <member name="M:Nito.Async.Sync.InvokeAndCallback``1(System.Func{``0},System.Action{Nito.Async.AsyncResultEventArgs{``0}},System.Object)">
      <summary>
            Runs <paramref name="action" /> followed by <paramref name="callback" /> with arguments indicating success,
            including its return value. If <paramref name="action" /> raises an exception, <paramref name="callback" />
            is invoked with arguments indicating the error.
            </summary>
      <param name="action">The action to perform.</param>
      <param name="callback">The callback to indicate success or error.</param>
      <param name="state">The user state to include in the arguments to the callback. May be null.</param>
      <typeparam name="T">The type of the result of the action.</typeparam>
    </member>
    <member name="T:Nito.Async.CallbackContext">
      <summary>
            Provides a context to which delegates may be bound.
            </summary>
    </member>
    <member name="M:Nito.Async.CallbackContext.#ctor">
      <summary>
            Creates a new context.
            </summary>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind(System.Action)">
      <summary>
            Binds a delegate to this context, and returns the bound, valid delegate.
            </summary>
      <param name="action">The contained delegate.</param>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind``1(System.Func{``0})">
      <summary>
            Binds a delegate to this context, and returns the bound, valid delegate.
            </summary>
      <param name="func">The contained delegate.</param>
      <typeparam name="T">The return value of the contained and bound delegates.</typeparam>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.Dispose">
      <summary>
            Invalidates all delegates bound to this context.
            </summary>
    </member>
    <member name="P:Nito.Async.CallbackContext.Invalidated">
      <summary>
            Returns true if all delegates previously bound to this context have been invalidated. Returns false if there is at least one delegate
            that is valid.
            </summary>
    </member>
    <member name="M:Nito.Async.CallbackContext.Reset">
      <summary>
            Resets a context. This invalidates all delegates currently bound to this context.
            </summary>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind(System.Action,System.ComponentModel.ISynchronizeInvoke)">
      <summary>
            Synchronizes a delegate and then binds it to this context, and returns the synchronized, bound, valid delegate.
            </summary>
      <param name="action">The contained delegate. This delegate should not raise exceptions.</param>
      <param name="synchronizingObject">The object to use for synchronizing the delegate if necessary.</param>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind(System.Action,System.Threading.SynchronizationContext)">
      <summary>
            Synchronizes a delegate and then binds it to this context, and returns the synchronized, bound, valid delegate.
            </summary>
      <param name="action">The contained delegate. This delegate should not raise exceptions.</param>
      <param name="synchronizationContext">The object to use for synchronizing the delegate if necessary.</param>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind``1(System.Func{``0},System.ComponentModel.ISynchronizeInvoke)">
      <summary>
            Synchronizes a delegate and then binds it to this context, and returns the synchronized, bound, valid delegate.
            </summary>
      <param name="func">The contained delegate. This delegate should not raise exceptions.</param>
      <param name="synchronizingObject">The object to use for synchronizing the delegate if necessary.</param>
      <typeparam name="T">The return value of the contained and bound delegates.</typeparam>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="M:Nito.Async.CallbackContext.Bind``1(System.Func{``0},System.Threading.SynchronizationContext)">
      <summary>
            Synchronizes a delegate and then binds it to this context, and returns the synchronized, bound, valid delegate.
            </summary>
      <param name="func">The contained delegate. This delegate should not raise exceptions.</param>
      <param name="synchronizationContext">The object to use for synchronizing the delegate.</param>
      <typeparam name="T">The return value of the contained and bound delegates.</typeparam>
      <returns>A valid delegate bound to the current context.</returns>
    </member>
    <member name="T:Nito.Async.Timer">
      <summary>
            Represents a timer that uses <see cref="T:System.Threading.SynchronizationContext" /> to synchronize with its creating thread.
            </summary>
    </member>
    <member name="M:Nito.Async.Timer.#ctor">
      <summary>
            Creates a new timer, binding to <see cref="P:System.Threading.SynchronizationContext.Current">SynchronizationContext.Current</see>.
            </summary>
    </member>
    <member name="P:Nito.Async.Timer.AutoReset">
      <summary>
            Gets or sets a value indicating whether the timer should become enabled again by default when <see cref="E:Nito.Async.Timer.Elapsed" /> returns.
            </summary>
    </member>
    <member name="M:Nito.Async.Timer.Cancel">
      <summary>
            Cancels any pending timeouts.
            </summary>
    </member>
    <member name="M:Nito.Async.Timer.Dispose">
      <summary>
            Frees all resources used by this timer.
            </summary>
    </member>
    <member name="E:Nito.Async.Timer.Elapsed">
      <summary>
            Occurs when the timer's wait time has elapsed.
            </summary>
    </member>
    <member name="P:Nito.Async.Timer.Enabled">
      <summary>
            Gets or sets a value indicating whether a timer is enabled.
            </summary>
    </member>
    <member name="P:Nito.Async.Timer.Interval">
      <summary>
            Gets or sets a value indicating the approximate time the timer will wait before invoking <see cref="E:Nito.Async.Timer.Elapsed" />.
            </summary>
    </member>
    <member name="M:Nito.Async.Timer.Restart">
      <summary>
            Disables and then enables the timer, restarting the wait time.
            </summary>
    </member>
    <member name="M:Nito.Async.Timer.SetPeriodic(System.TimeSpan)">
      <summary>
            Sets the timer to periodically wait for an interval.
            </summary>
      <param name="period">The period to wait.</param>
    </member>
    <member name="M:Nito.Async.Timer.SetSingleShot(System.TimeSpan)">
      <summary>
            Sets the timer to wait for an interval.
            </summary>
      <param name="interval">The interval to wait.</param>
    </member>
  </members>
</doc>